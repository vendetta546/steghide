package stegano

import (
"bytes"
"image"
"image/png"
"log"
"math/bits"
)

// as32BitString returns a packed 32-bit string representation of the given number.
func as32BitString(n int) []byte {
var byteString []byte
for c := 24; c >= -8; c -= 8 {
byteString = append(byteString, byte(n>>c&0xff))
}
return byteString
}

// asBits returns a generator that provides a bit representation of the input data.
func asBits(data []byte) <-chan byte {
bitsCh := make(chan byte)
go func() {
defer close(bitsCh)
for _, char := range data {
for shift := 7; shift >= 0; shift-- {
bitsCh <- (char >> shift) & 1
}
}
}()
return bitsCh
}

// NTuples returns an iterator that packs data in tuples of length n padded with the fill value.
func nTuples(data []byte, n int, fill byte) <-chan []byte {
tuplesCh := make(chan []byte)
go
